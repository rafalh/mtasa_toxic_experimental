local g_VoteToRoom = {}local g_RoomToVote = {}local ISSUE_7364 = trueaddEvent("onGameStop")addEvent("onRoomMapStart")local function onVoteFinish(optName)	local room = g_VoteToRoom[source]	if(not room) then return end	local mapHandle	if(optName == "Redo") then		mapHandle = getRoomMap(room)	end		if(not mapHandle) then		local mapsList = getMapsList()		mapHandle = mapsList[math.random(1, #mapsList)]	end		startRoomMap(room, mapHandle)endlocal function onVoteDestroy()	local room = g_VoteToRoom[source]	if(not room) then return end	g_VoteToRoom[source] = nil	g_RoomToVote[room] = nil	--outputChatBox("onVoteDestroy")endlocal function startVote(room)	if(g_RoomToVote[room]) then return end		local info = {		title = "Select next map",		visibleTo = room}	local opts = {		{"Redo"},		{"Random"}}	local vote = createVote(info, opts)	g_RoomToVote[room] = vote	g_VoteToRoom[vote] = room	if(not ISSUE_7364) then		addEventHandler("onVoteFinish", vote, onVoteFinish, false) -- issue #7364		addEventHandler("onElementDestroy", vote, onVoteDestroy, false) -- issue #7364	endendlocal function onGameStop(reason)	local id = getElementID(source)	--outputDebugString("Game stop: "..id, 3)		if(reason ~= "mapchange") then		startVote(source)	endendlocal function onPlayerChangeRoom(room)	if(not room) then return end		local raceState = getElementData(room, "race.state")	if(getRoomPlayersCount(room) == 1) then		startVote(room)	endendlocal function onRoomMapStart()	local vote = g_RoomToVote[source]	if(vote) then		destroyElement(vote)	endendlocal function cleanupVoteBetweenMaps()	--outputChatBox("cleanupVoteBetweenMaps")	for room, vote in pairs(g_RoomToVote) do		destroyElement(vote)	end	--outputChatBox("cleanupVoteBetweenMaps end")endfunction initVoteBetweenMaps()	addEventHandler("onGameStop", g_Root, onGameStop)	addEventHandler("onPlayerChangeRoom", g_Root, onPlayerChangeRoom)	addEventHandler("onRoomMapStart", g_Root, onRoomMapStart)	addEventHandler("onResourceStop", g_Root, cleanupVoteBetweenMaps)		-- issue #7364	if(ISSUE_7364) then		addEventHandler("onVoteFinish", g_Root, onVoteFinish)		addEventHandler("onElementDestroy", g_Root, onVoteDestroy)	end		local rooms = getRooms()	for i, room in ipairs(rooms) do		local raceState = getElementData(room, "race.state")		if((raceState == "idle" or raceState == "stopped") and getRoomPlayersCount(room) > 0) then			startVote(room)		end	endend